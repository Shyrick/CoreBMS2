package Lesson8_1.L8_1_Lection;


import java.util.concurrent.Semaphore;

public class L8_1_5_HardLock {

    // Time 1:36:00

    // При работе с потоками есть вероятность зависания
    // кода поток №1 делает действия и затем становится в симофор и из симафора вызывает метод из потока №2
    // В потоке №2 выполняется код и затем он тоже становится в симафор, и из симофора вызывет код из потока №1
    // Получается, что поток №1 ждет завершения симофора в потоке №1, а поток №1 ждет завершения потока №2
    // И в итоге оба потока не могут завершиться

    // Такая ситуация наз. HardLock и для нее характерно отсутсвие загрузки прощессора, т.к. потоки просто ждут друг друга

// можно проверять перед началом действий, свободен ли симафор,
//    Semaphore semaphore = new Semaphore(1);
//        semaphore.tryAcquire(); возвращает false, если симафор занят, и true если симафор свободен, и поток
//    входит в симафор

    // semaphore.availablePermits();
    // при колличестве потоков в семафоре (permits = 1) вернет 0 , если симафор занят
    // т.е. нет свободных пермитов





}
